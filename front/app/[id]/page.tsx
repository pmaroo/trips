// Page.jsx (서버 컴포넌트)
import { Metadata } from "next";
import ClientPage from "./clientPage";
import axios from "axios";

export const metadata: Metadata = {
  title: "About",
  description: "Generated by Next.js",
};

export default async function Page(context: { params: { id: string } }) {
  const { params } = context; // 이 단계에서 비동기 아님
  const { id } = await params;

  const apiClient = axios.create({
    baseURL: "http://localhost:8080/api/plan", // api 주소
    headers: { "content-Type": "application/json" },
    withCredentials: true, // ✅ 쿠키 포함 요청
  });

  const getPlan = async () => {
    try {
      const { data } = await apiClient.post("/id", { id: parseInt(id) });

      return data;
    } catch (error) {
      console.log(error.response.data.message || error);
    }
  };

  // const data = await getPlan();
  const data = [];

  return <ClientPage planData={data} />;
}
// 서버 컴포넌트의 장점을 살리면서 클라이언트 컴포넌트를 사용하는 방법

// 1. "use client" 컴포넌트 통째로 명시 => 구조가 복잡해질 가능성
// 2. props로 넘겨주기 => 서버 컴포넌트와 클아이언트 컴포넌트의 경계가 모호해질 가능성
// 3. next/dynamic 사용 => 렌더링 및 최적화에 적합, 초기로딩이 지연될 수 있으나 React Suspense로 해결가능
