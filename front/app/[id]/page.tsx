// Page.jsx (서버 컴포넌트)
import { Metadata } from "next";
import ClientPage from "./clientPage";
import axios from "axios";

export const metadata: Metadata = {
  title: "About",
  description: "Generated by Next.js",
};

export default async function Page({ params }: { params: { id: string } }) {
  const { id } = params;

  const apiClient = axios.create({
    baseURL: "http://localhost:8080/api/plan", // API 주소
    headers: { "Content-Type": "application/json" },
    withCredentials: true,
  });

  try {
    const { data } = await apiClient.post("/id", {
      id: parseInt(id, 10),
    });

    return <ClientPage planData={data} />;
  } catch (error: any) {
    console.error("Error fetching plan:", error?.response?.data || error);
    return <div>데이터를 불러오지 못했습니다.</div>;
  }
}
// 서버 컴포넌트의 장점을 살리면서 클라이언트 컴포넌트를 사용하는 방법

// 1. "use client" 컴포넌트 통째로 명시 => 구조가 복잡해질 가능성
// 2. props로 넘겨주기 => 서버 컴포넌트와 클아이언트 컴포넌트의 경계가 모호해질 가능성
// 3. next/dynamic 사용 => 렌더링 및 최적화에 적합, 초기로딩이 지연될 수 있으나 React Suspense로 해결가능
